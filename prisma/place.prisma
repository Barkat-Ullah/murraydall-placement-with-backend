model Subcategory {
    id                  String         @id @default(auto()) @map("_id") @db.ObjectId
    name                String         // e.g., "Dream Beach", "Secret Mallorca", "Top Rated", etc.
    description         String?        // optional, subcategory er short desc
    categoryType        CategoryTypePlace  // eta main category ke link korbe (Beach_Life, City_Life, etc.)
    isPremium           Boolean        @default(false)  // Secret Mallorca er jonno true
    premiumPrice        Float?         // only if isPremium=true, e.g., Secret Mallorca er jonno 10.0 (same for all)
    stripePriceId       String?        // if premium, Stripe integration er jonno
    stripeProductId     String?        // same

    // Relations
    places              Place[]        // one-to-many: ek subcategory er under multiple places
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt

    @@unique([name, categoryType])  // ensure same name (like "Secret Mallorca") per category unique thake, but different categories e duplicate name allowed
    @@map("subcategory")
}

model Place {
    id                   String         @id @default(auto()) @map("_id") @db.ObjectId
    placeTitle           String
    placeDescription     String
    placeLocation        String
    aboutPlace           String
    how_to_go_there      String
    suggested_Visit_Time String

    categoryType         CategoryTypePlace  // main category (Beach_Life, etc.)
    subcategoryId        String?            @db.ObjectId  // optional link to Subcategory (if null, no subcat)
    subcategory          Subcategory?       @relation(fields: [subcategoryId], references: [id])  // relation

    price                Float             // eta auto-set hobe: if subcategory.isPremium, then subcategory.premiumPrice use koro
    stripePriceId        String?
    stripeProductId      String?
    subscriptionType     SubscriptionType   // auto-set: if subcategory.isPremium, then PREMIUM

    userId               String            @db.ObjectId
    user                 User              @relation(fields: [userId], references: [id])
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt

    @@map("place")
}

enum CategoryTypePlace {
    Beach_Life
    City_Life
    Night_life
    Family
}

enum SubscriptionType {
    FREE
    PREMIUM
}