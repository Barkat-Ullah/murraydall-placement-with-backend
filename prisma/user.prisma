model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  email       String       @unique
  phoneNumber String?      @unique
  password    String
  
  role        UserRoleEnum @default(USER)

  status     UserStatus @default(ACTIVE)
  clientInfo Json?

  describe String?
  city     String?
  address  String?
  profile  String?

  otp       String?
  otpExpiry DateTime?

  isEmailVerified  Boolean @default(false)
  isDeleted        Boolean @default(false)
  hasPremiumAccess Boolean @default(false)

  stripeCustomerId String?

  payments  Payment[]
  place     Place[]
  favorites Favorite[] @relation("UserFavorites")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model Guest {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  deviceId         String  @unique
  fullName         String
  hasPremiumAccess Boolean @default(false)
  role             String? @default("GUEST")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites Favorite[] @relation("GuestFavorites")

  @@map("guests")
}

model Favorite {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String? @db.ObjectId
  guestId String? @db.ObjectId
  placeId String?  @db.ObjectId

  user  User?  @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  guest Guest? @relation("GuestFavorites", fields: [guestId], references: [id], onDelete: Cascade)
  place Place?  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, placeId])
  @@unique([guestId, placeId])
  @@map("favorites")
}
